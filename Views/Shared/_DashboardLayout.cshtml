<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Examina</title>
    <link rel="stylesheet" href="~/css/site.css" />
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100">
    <!-- Notifications Container -->
    <div id="notifications" class="fixed top-4 right-4 z-50 space-y-2">
        <!-- Notifications will be dynamically inserted here -->
    </div>

    <header>
        <nav class="bg-white shadow-md">
            <!-- Add your navigation items here -->
        </nav>
    </header>

    <main>
        @using Microsoft.AspNetCore.Identity
        @using System.Security.Claims
        @inject UserManager<AppDev2Project.Models.User> UserManager
        @{
            Layout = "_Layout";
        }

        <div class="flex h-full bg-white">
            <!-- Sidebar -->
            <div class="w-64 bg-teal-600 text-white">
                <div class="sticky top-0 h-screen w-64 bg-teal-600 text-white overflow-y-auto z-50">
                    <div class="flex items-center p-4 border-b border-teal-500">
                        <div class="w-10 h-10 rounded-full overflow-hidden">
                            @{
                                var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
                                var user = await UserManager.FindByIdAsync(userId);
                            }
                            <img src="@user?.ProfilePictureUrl" alt="@user?.Name" class="w-full h-full object-cover" />
                        </div>
                        <div class="ml-3">
                            <p class="font-semibold">@(user?.Name ?? "Unknown")</p>
                            <p class="text-sm text-gray-400">@user?.Role</p>
                        </div>
                    </div>
                    
                    <nav class="mt-4">
                        
                        @if (user?.Role == "Student")
                        {
                            <a href="@Url.Action("Dashboard", "Student")" class="flex items-center px-4 py-3 text-white hover:bg-teal-700">
                                <i class="fas fa-home text-lg mr-4"></i>
                                Dashboard
                            </a>
                            <a href="@Url.Action("ExamHistory", "Student")" class="flex items-center px-4 py-3 text-white hover:bg-teal-700">
                                <i class="fas fa-history text-lg mr-4"></i>
                                Exam History
                            </a>
                            <a href="@Url.Action("Index", "Settings")" class="flex items-center px-4 py-3 text-white hover:bg-teal-700">
                                <i class="fas fa-cog text-lg mr-4"></i>
                                Settings
                            </a>
                        }
                        else if (user?.Role == "Teacher")
                        {
                            <a href="@Url.Action("Dashboard", "Teacher")" class="flex items-center px-4 py-3 text-white hover:bg-teal-700">
                                <i class="fas fa-home text-lg mr-4"></i>
                                Home
                            </a>
                            <a href="@Url.Action("Index", "Exam")" class="flex items-center px-4 py-3 text-white hover:bg-teal-700">
                                <i class="fas fa-file-alt text-lg mr-4"></i>
                                Exams
                            </a>
                            <a href="@Url.Action("Create", "Exam")" class="flex items-center px-4 py-3 text-white hover:bg-teal-700">
                                <i class="fas fa-plus text-lg mr-4"></i>
                                Create New Exam
                            </a>
                            <a href="@Url.Action("Students", "Teacher")" class="flex items-center px-4 py-3 text-white hover:bg-teal-700">
                                <i class="fas fa-users text-lg mr-4"></i>
                                Students
                            </a>
                            <a href="@Url.Action("CompletedExams", "Teacher")" class="flex items-center px-4 py-3 text-white hover:bg-teal-700">
                                <i class="fas fa-check-circle text-lg mr-4"></i>
                                Completed Exams
                            </a>
                            <a href="@Url.Action("Index", "Settings")" class="flex items-center px-4 py-3 text-white hover:bg-teal-700">
                                <i class="fas fa-cog text-lg mr-4"></i>
                                Settings
                            </a>
                        }
                        
                    </nav>
                </div>
            </div>

            <!-- Main Content -->
            <div class="flex-1 flex flex-col">
                <header class="bg-white shadow flex-shrink-0">
                    <div class="px-6 py-4">
                        <div class="flex justify-between items-center">
                            <h1 class="text-2xl font-bold text-gray-900 ml-2">@ViewData["Title"]</h1>
                            <div class="flex items-center">
                                <span class="mr-4">@DateTime.Now.ToString("dddd, MMMM d, yyyy")</span>
                            </div>
                        </div>
                    </div>
                </header>

                <main class="flex-1 p-6 overflow-y-auto">
                    @RenderBody()
                </main>
            </div>
        </div>

        @await RenderSectionAsync("Scripts", required: false)
    </main>

    <script src="~/js/site.js"></script>
    <script>
        // Add this to your existing scripts section
        function showNotification(message, type = 'warning') {
            const notificationContainer = document.getElementById('notifications');
            const notification = document.createElement('div');
            
            notification.className = `px-4 py-2 rounded-lg shadow-lg transition-all duration-300 transform translate-x-0 ${
                type === 'warning' ? 'bg-red-500 text-white' : 'bg-blue-500 text-white'
            }`;
            
            notification.innerHTML = `
                <div class="flex items-center">
                    <span class="mr-2">‚ö†Ô∏è</span>
                    <span>${message}</span>
                    <button onclick="this.parentElement.parentElement.remove()" class="ml-4 text-white hover:text-gray-200">√ó</button>
                </div>
            `;

            notificationContainer.appendChild(notification);

            // Remove notification after 10 seconds
            setTimeout(() => {
                notification.remove();
            }, 10000);
        }

        function checkExamTimes() {
            const examTimers = document.querySelectorAll('[data-exam-end]');
            
            examTimers.forEach(timer => {
                const endTime = new Date(timer.dataset.examEnd).getTime();
                const currentTime = new Date().getTime();
                const timeLeft = endTime - currentTime;
                const minutesLeft = Math.floor(timeLeft / 60000);

                // Don't show multiple notifications for the same time threshold
                if (!timer.dataset.notifiedFor) {
                    timer.dataset.notifiedFor = '';
                }

                const notifications = timer.dataset.notifiedFor.split(',');

                // Check for different time thresholds
                if (minutesLeft <= 1 && !notifications.includes('1')) {
                    showNotification('‚ö†Ô∏è 1 minute remaining for exam!', 'warning');
                    notifications.push('1');
                } else if (minutesLeft <= 5 && !notifications.includes('5')) {
                    showNotification('‚ö†Ô∏è 5 minutes remaining for exam!', 'warning');
                    notifications.push('5');
                } else if (minutesLeft <= 15 && !notifications.includes('15')) {
                    showNotification('‚ö†Ô∏è 15 minutes remaining for exam!', 'warning');
                    notifications.push('15');
                } else if (minutesLeft <= Math.floor(timer.dataset.examDuration / 2) && !notifications.includes('half')) {
                    showNotification('üìù Halfway through the exam!', 'info');
                    notifications.push('half');
                }

                timer.dataset.notifiedFor = notifications.join(',');
            });
        }

        // Check exam times every minute
        setInterval(checkExamTimes, 60000);
        
        // Initial check
        checkExamTimes();
    </script>
</body>
</html>